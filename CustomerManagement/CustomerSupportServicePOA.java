package CustomerManagement;


/**
* CustomerManagement/CustomerSupportServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from D:/java/cms/src/idl/CustomerManagement.idl
* Thursday, March 13, 2025 1:52:43 PM ICT
*/

public abstract class CustomerSupportServicePOA extends org.omg.PortableServer.Servant
 implements CustomerManagement.CustomerSupportServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createSupportRequest", new java.lang.Integer (0));
    _methods.put ("updateSupportRequest", new java.lang.Integer (1));
    _methods.put ("getSupportRequestById", new java.lang.Integer (2));
    _methods.put ("getAllSupportRequests", new java.lang.Integer (3));
    _methods.put ("getSupportRequestsByCustomer", new java.lang.Integer (4));
    _methods.put ("getSupportRequestsByStatus", new java.lang.Integer (5));
    _methods.put ("createComplaint", new java.lang.Integer (6));
    _methods.put ("updateComplaint", new java.lang.Integer (7));
    _methods.put ("getComplaintById", new java.lang.Integer (8));
    _methods.put ("getAllComplaints", new java.lang.Integer (9));
    _methods.put ("getComplaintsByCustomer", new java.lang.Integer (10));
    _methods.put ("getComplaintsByStatus", new java.lang.Integer (11));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // CustomerManagement/CustomerSupportService/createSupportRequest
       {
         CustomerManagement.SupportRequest request = CustomerManagement.SupportRequestHelper.read (in);
         boolean $result = false;
         $result = this.createSupportRequest (request);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // CustomerManagement/CustomerSupportService/updateSupportRequest
       {
         CustomerManagement.SupportRequest request = CustomerManagement.SupportRequestHelper.read (in);
         boolean $result = false;
         $result = this.updateSupportRequest (request);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // CustomerManagement/CustomerSupportService/getSupportRequestById
       {
         String requestId = in.read_string ();
         CustomerManagement.SupportRequest $result = null;
         $result = this.getSupportRequestById (requestId);
         out = $rh.createReply();
         CustomerManagement.SupportRequestHelper.write (out, $result);
         break;
       }

       case 3:  // CustomerManagement/CustomerSupportService/getAllSupportRequests
       {
         CustomerManagement.SupportRequest $result[] = null;
         $result = this.getAllSupportRequests ();
         out = $rh.createReply();
         CustomerManagement.SupportRequestListHelper.write (out, $result);
         break;
       }

       case 4:  // CustomerManagement/CustomerSupportService/getSupportRequestsByCustomer
       {
         String customerId = in.read_string ();
         CustomerManagement.SupportRequest $result[] = null;
         $result = this.getSupportRequestsByCustomer (customerId);
         out = $rh.createReply();
         CustomerManagement.SupportRequestListHelper.write (out, $result);
         break;
       }

       case 5:  // CustomerManagement/CustomerSupportService/getSupportRequestsByStatus
       {
         String status = in.read_string ();
         CustomerManagement.SupportRequest $result[] = null;
         $result = this.getSupportRequestsByStatus (status);
         out = $rh.createReply();
         CustomerManagement.SupportRequestListHelper.write (out, $result);
         break;
       }

       case 6:  // CustomerManagement/CustomerSupportService/createComplaint
       {
         CustomerManagement.ComplaintInfo complaint = CustomerManagement.ComplaintInfoHelper.read (in);
         String $result = null;
         $result = this.createComplaint (complaint);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // CustomerManagement/CustomerSupportService/updateComplaint
       {
         CustomerManagement.ComplaintInfo complaint = CustomerManagement.ComplaintInfoHelper.read (in);
         boolean $result = false;
         $result = this.updateComplaint (complaint);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // CustomerManagement/CustomerSupportService/getComplaintById
       {
         String complaintId = in.read_string ();
         CustomerManagement.ComplaintInfo $result = null;
         $result = this.getComplaintById (complaintId);
         out = $rh.createReply();
         CustomerManagement.ComplaintInfoHelper.write (out, $result);
         break;
       }

       case 9:  // CustomerManagement/CustomerSupportService/getAllComplaints
       {
         CustomerManagement.ComplaintInfo $result[] = null;
         $result = this.getAllComplaints ();
         out = $rh.createReply();
         CustomerManagement.ComplaintInfoListHelper.write (out, $result);
         break;
       }

       case 10:  // CustomerManagement/CustomerSupportService/getComplaintsByCustomer
       {
         String customerId = in.read_string ();
         CustomerManagement.ComplaintInfo $result[] = null;
         $result = this.getComplaintsByCustomer (customerId);
         out = $rh.createReply();
         CustomerManagement.ComplaintInfoListHelper.write (out, $result);
         break;
       }

       case 11:  // CustomerManagement/CustomerSupportService/getComplaintsByStatus
       {
         String status = in.read_string ();
         CustomerManagement.ComplaintInfo $result[] = null;
         $result = this.getComplaintsByStatus (status);
         out = $rh.createReply();
         CustomerManagement.ComplaintInfoListHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CustomerManagement/CustomerSupportService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public CustomerSupportService _this() 
  {
    return CustomerSupportServiceHelper.narrow(
    super._this_object());
  }

  public CustomerSupportService _this(org.omg.CORBA.ORB orb) 
  {
    return CustomerSupportServiceHelper.narrow(
    super._this_object(orb));
  }


} // class CustomerSupportServicePOA
